import openmeteo_requests

import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = -1)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
	"latitude": 40.7865,
	"longitude": -73.97434,
	"start_date": "2022-01-01",
	"end_date": "2022-12-31",
	"daily": ["temperature_2m_max", "temperature_2m_min", "temperature_2m_mean"],
	"temperature_unit": "fahrenheit",
	"wind_speed_unit": "mph",
	"precipitation_unit": "inch",
	"timezone": "America/New_York"
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]

# Process daily data. The order of variables needs to be the same as requested.
daily = response.Daily()
daily_temperature_2m_max = daily.Variables(0).ValuesAsNumpy()
daily_temperature_2m_min = daily.Variables(1).ValuesAsNumpy()
daily_temperature_2m_mean = daily.Variables(2).ValuesAsNumpy()

daily_data = {"date": pd.date_range(
	start = pd.to_datetime(daily.Time(), unit = "s", utc = True),
	end = pd.to_datetime(daily.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = daily.Interval()),
	inclusive = "left"
)}
daily_data["temperature_2m_max"] = daily_temperature_2m_max
daily_data["temperature_2m_min"] = daily_temperature_2m_min
daily_data["temperature_2m_mean"] = daily_temperature_2m_mean

daily_dataframe = pd.DataFrame(data = daily_data)
def classify_color(temp):
    if temp < 32.5:
        return "Purple"
    elif 32.5 <= temp < 49.5:
        return "Blue"
    elif 49.5 <= temp < 64.5:
        return "Cyan"
    elif 64.5 <= temp < 77.5:
        return "Green"
    elif 77.5 <= temp < 87.5:
        return "Yellow"
    elif temp >= 87.5:
        return "Red"
    else:
        return ""  # Handle unexpected cases if needed

daily_dataframe["day_color"] = daily_dataframe["temperature_2m_mean"].apply(classify_color)
daily_dataframe["weighted_day_color"] = daily_dataframe.apply(lambda row: classify_color((float(row['temperature_2m_max']) + float(row['temperature_2m_mean'])) / 2.0),axis=1)

print(daily_dataframe)

counts = daily_dataframe["day_color"].value_counts()
weighted_counts = daily_dataframe["weighted_day_color"].value_counts()
print(counts)
print(weighted_counts)